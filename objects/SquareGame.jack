class SquareGame {
   field Square square; // the square of this game
   field Enemy enemy;
   field Enemy enemy2;
   field Enemy friend;
   field King king;
   field int direction; // the square's current direction:
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field int score;
   /** Constructs a new Square Game. */
   constructor SquareGame new() {
      // Creates a 30 by 30 pixels square and positions it at the top-left
      // of the screen.
      let square = Square.new(20, 50, 30);
      let enemy = Enemy.new(100,50,20,20);
      let enemy2 = Enemy.new(200,100,8,8);
      let friend = Enemy.new(290,130,10,4);
      let direction = 0;  // initial state is no movement
      let score = 0;
      return this;
   }
   function int abs(int a,int b){
       var int diff;
       let diff = a-b;
       if(diff < 0){
          let diff = b-a;
       }
       return diff;
   }
   function boolean inrange(int xsquare,int ysquare,int squaresize,int xenemy,int yenemy,int enemy_xlength,int enemy_ylength){
         var boolean in;
         var int maxX1;
         var int maxY1;
         var int maxX2;
         var int maxY2;
         let in = false;
         let maxX1 = (xsquare+squaresize);
         let maxY1 = (ysquare+squaresize);
         let maxX2 = (xenemy+enemy_xlength);
         let maxY2 = (yenemy+enemy_ylength);
         if((maxX1>xenemy)&(maxX2>xsquare)){
            if((maxY1>yenemy)&(maxY2>ysquare)){
                let in = true;
            }
         }
         return in;
     }
   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do enemy.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      do Sys.wait(7);  // delays the next movement
      return;
   }
  method void moveEnemy(int direction){
    if (direction = 1) { do enemy.moveUp(); }
    if (direction = 2) { do enemy.moveDown(); }
    if (direction = 3) { do enemy.moveLeft(); }
    if (direction = 4) { do enemy.moveRight(); }
    do Sys.wait(5);  // delays the next movement
    return;
  }
  method void moveSecondEnemy(int direction){
    if (direction = 1) { do enemy2.moveUp(); }
    if (direction = 2) { do enemy2.moveDown(); }
    if (direction = 3) { do enemy2.moveLeft(); }
    if (direction = 4) { do enemy2.moveRight(); }
    do Sys.wait(5);  // delays the next movement
    return;
  }
  method void moveFriend(int direction){
    if (direction = 1) { do friend.moveUp(); }
    if (direction = 2) { do friend.moveDown(); }
    if (direction = 3) { do friend.moveLeft(); }
    if (direction = 4) { do friend.moveRight(); }
    do Sys.wait(5);  // delays the next movement
    return;
  }
   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      var boolean alive1;
      var boolean alive2;
      var boolean alive3;//friend
      var boolean final;
      var int enedir;
      var int seed;
      var int seed2;
      var int stepOfNextenemy;
      var int stepfr;
      var int lifeOfking;
      let exit = false;
      let alive1 = false;
      let alive2 = false;
      let alive3 = false;
      let final = false;
      let lifeOfking = 3;
      do Output.moveCursor(0,0);
      do Output.printString("Score: ");
      do Output.printInt(score);
      do Output.moveCursor(0,10);
      do Output.printString("Life of king: ");
      do Output.printInt(lifeOfking);
      //do Output.printString("You need to attack the heart of the enemy.");
      while (~exit) {
         let enedir = Random.randRange(4);
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do Sys.wait(5);
            do moveSquare();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            let stepOfNextenemy = ((enedir*3)/4);
            let stepfr = ((enedir*3+1)/4);
            do moveSquare();
            do moveEnemy(enedir);
            do moveSecondEnemy(stepOfNextenemy);
            do moveFriend(stepfr);
            do enemy2.draw();
            do square.draw();
            do enemy.draw();
            do friend.draw();
            if(~alive1 & SquareGame.inrange(square.getx(),square.gety(),square.get_size(),enemy.getx(),enemy.gety(),enemy.get_width(),enemy.get_length())){
               do enemy.erase();
               do enemy2.draw();
               do square.draw();
               do friend.draw();
               do enemy.dispose();
               let score = score-1;
               if(score<0){
                  let exit = true;
               }
               do Output.moveCursor(0,7);
               do Output.printInt(score);
               let alive1 = true;
            }
            if(~alive2 & SquareGame.inrange(square.getx(),square.gety(),square.get_size(),enemy2.getx(),enemy2.gety(),enemy2.get_width(),enemy2.get_length())){
               do enemy2.erase();
               do enemy.draw();
               do square.draw();
               do friend.draw();
               do enemy2.dispose();
               let score = score-1;
               if(score<0){
                  let exit = true;
               }
               do Output.moveCursor(0,7);
               do Output.printInt(score);
               let alive2 = true;
            }
            if(~alive3 & SquareGame.inrange(square.getx(),square.gety(),square.get_size(),friend.getx(),friend.gety(),friend.get_width(),friend.get_length())){
               do friend.erase();
               do friend.dispose();
               do enemy2.draw();
               do square.draw();
               do enemy.draw();
               let score = score+1;
               if(score>2){
                 let final = true;
               }
               do Output.moveCursor(0,7);
               do Output.printInt(score);
               let alive3 = true;
            }
         }
         if(alive1){
            let seed = Random.randRange(100);
            let seed2 = Random.randRange(10);
            let enemy = Enemy.new(seed*2+seed2,seed*1+seed2+30,4,4);
            let alive1 = false;
         }
         if(alive2){
            let seed = Random.randRange(100);
            let seed2 = Random.randRange(10);
            let enemy2 = Enemy.new(seed*4+seed2,seed*1+seed2+30,8,8);
            let alive2 = false;
         }
         if(alive3){
           let seed = Random.randRange(100);
           let seed2 = Random.randRange(10);
           let friend = Enemy.new(seed*3+250,seed*1-seed2+90,10,4);
           let alive3 = false;
         }
         if(final){
            let king = King.new(100,100,40);
            if(lifeOfking>0){
               if(SquareGame.inrange(square.getx(),square.gety(),square.get_size(),king.getx(),king.gety(),king.get_size(),king.get_size())){
                    let lifeOfking = lifeOfking-1;
                    let score = score-1;
                    do Output.moveCursor(0,7);
                    do Output.printInt(score);
                    do Output.moveCursor(0,10);
                    do Output.printString("Life of king: ");
                    do Output.printInt(lifeOfking);
               }
            }
            if(lifeOfking=0 & score>0){
               let exit = true;
            }
         }
     } // while

     return;
   }
}
